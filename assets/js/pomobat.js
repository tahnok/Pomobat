// Generated by CoffeeScript 1.3.3
(function() {
  var Pomobat,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Batman.config.minificationErrors = false;

  Pomobat = (function(_super) {

    __extends(Pomobat, _super);

    function Pomobat() {
      return Pomobat.__super__.constructor.apply(this, arguments);
    }

    Pomobat.root('pomodoros#index');

    return Pomobat;

  })(Batman.App);

  Pomobat.PomodorosController = (function(_super) {

    __extends(PomodorosController, _super);

    function PomodorosController() {
      this.doneBreak = __bind(this.doneBreak, this);

      this.donePomodoro = __bind(this.donePomodoro, this);

      this.updatePomodoro = __bind(this.updatePomodoro, this);
      PomodorosController.__super__.constructor.apply(this, arguments);
      this.set('pomodoros', Pomobat.Pomodoro.get('all'));
      this.set('currentPomodoro', new Pomobat.Pomodoro());
      this.set('sessionPomodoros', 0);
      this.set('finishPomodoroSound', new buzz.sound('assets/sound/done2', {
        'preload': true,
        'formats': ['mp3', 'ogg']
      }));
      this.set('finishBreakSound', new buzz.sound('assets/sound/break_done', {
        'preload': true,
        'formats': ['mp3', 'ogg']
      }));
      this.setDefault('work_time', '25:00');
      this.setDefault('break_time', '5:00');
      this.setDefault('long_break_time', '20:00');
      this.setDefault('use_sounds', 'true');
    }

    PomodorosController.prototype.setDefault = function(key, value) {
      if (typeof localStorage[key] === 'undefined') {
        return localStorage[key] = value;
      }
    };

    PomodorosController.prototype.index = function() {};

    PomodorosController.prototype.settings = function() {};

    PomodorosController.prototype.newPomodoro = function() {
      var _this = this;
      return this.get('currentPomodoro').save(function(err, pomodoro) {
        if (err) {
          if (!(err instanceof Batman.ErrorsSet)) {
            throw err;
          }
        } else {
          _this.set('currentPomodoro', new Pomobat.Pomodoro());
          return _this.set('paused', false);
        }
      });
    };

    PomodorosController.prototype.startPomodoro = function() {
      var pomodoro;
      pomodoro = this.get('currentPomodoro');
      pomodoro.set('state', 'running');
      pomodoro.save();
      return this.startTimer(localStorage.work_time, this.donePomodoro, this.updatePomodoro);
    };

    PomodorosController.prototype.updatePomodoro = function(time) {
      return this.get('currentPomodoro').set('timeLeft', time);
    };

    PomodorosController.prototype.donePomodoro = function() {
      var pomodoro;
      window.document.title = "Pomodoro";
      pomodoro = this.get('currentPomodoro');
      pomodoro.set('state', 'finished');
      pomodoro.save();
      this.set('sessionPomodoros', this.get('sessionPomodoros') + 1);
      if (localStorage.use_sounds === 'true') {
        this.get('finishPomodoroSound').play();
      }
      return alert("Pomodoro done!");
    };

    PomodorosController.prototype.togglePaused = function() {
      var state;
      state = this.get('paused');
      if (state) {
        this.resumePomodoro();
      } else {
        this.pausePomodoro();
      }
      return this.set('paused', !state);
    };

    PomodorosController.prototype.pausePomodoro = function() {
      var pomodoro;
      this.stopTimer();
      pomodoro = this.get('currentPomodoro');
      return pomodoro.set('state', 'paused');
    };

    PomodorosController.prototype.resumePomodoro = function() {
      var pomodoro;
      this.startTimer(this.get('timeLeft'), this.donePomodoro, this.updatePomodoro);
      pomodoro = this.get('currentPomodoro');
      return pomodoro.set('state', 'running');
    };

    PomodorosController.prototype.stopPomodoro = function() {
      var pomodoro;
      this.stopTimer();
      window.document.title = "Pomodoro";
      pomodoro = this.get('currentPomodoro');
      pomodoro.set('state', 'cancelled');
      return this.newPomodoro();
    };

    PomodorosController.prototype.startBreak = function() {
      var time;
      if (this.get('sessionPomodoros') % 4 === 0) {
        time = localStorage.long_break_time;
      } else {
        time = localStorage.break_time;
      }
      return this.startTimer(time, this.doneBreak);
    };

    PomodorosController.prototype.doneBreak = function() {
      if (localStorage.use_sounds === 'true ') {
        this.get('finishBreakSound').play();
      }
      alert("break's over! get back to work!");
      return this.newPomodoro();
    };

    PomodorosController.prototype.startTimer = function(time, done, update) {
      var _this = this;
      this.set('timeLeft', time);
      window.tick = function() {
        return _this.tick(done, update);
      };
      return this.set('timeoutID', setTimeout(window.tick, 1000));
    };

    PomodorosController.prototype.stopTimer = function() {
      return window.clearTimeout(this.get('timeoutID'));
    };

    PomodorosController.prototype.tick = function(done, update) {
      var minutes, seconds, time;
      time = this.get('timeLeft').split(":");
      minutes = parseInt(time[0], 10);
      seconds = parseInt(time[1], 10);
      if ((minutes === 0) && (seconds === 0)) {
        return done();
      } else {
        if (seconds === 0) {
          minutes = minutes - 1;
          seconds = 59;
        } else {
          seconds = seconds - 1;
        }
        if (seconds < 10) {
          seconds = "0" + seconds;
        }
        time = "" + minutes + ":" + seconds;
        window.document.title = time + " | Pomobat";
        if (update) {
          update(time);
        }
        this.set('timeLeft', time);
        return this.set('timeoutID', setTimeout(window.tick, 1000));
      }
    };

    PomodorosController.prototype.popout = function() {
      window.open('index.html', 'Pomobat', 'height=360,width=400,scrollbar=false');
      window.close();
      return console.log("tried to close window");
    };

    PomodorosController.prototype.showSettings = function() {
      $('#settings').slideToggle();
      return this.loadFormSettings();
    };

    PomodorosController.prototype.hideSettings = function() {
      this.saveFormSettings();
      return $('#settings').slideToggle();
    };

    PomodorosController.prototype.loadFormSettings = function() {
      $('#work_time').val(localStorage.work_time);
      $('#break_time').val(localStorage.break_time);
      $('#long_break_time').val(localStorage.long_break_time);
      return $('#use_sounds').prop('checked', localStorage.use_sounds === 'true');
    };

    PomodorosController.prototype.saveFormSettings = function() {
      var form_val, value, _i, _len, _ref;
      _ref = ['work_time', 'break_time', 'long_break_time'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        value = _ref[_i];
        form_val = $('#' + value).val();
        if (form_val !== '') {
          localStorage[value] = form_val;
        }
      }
      return localStorage.use_sounds = $('#use_sounds').prop('checked') + '';
    };

    PomodorosController.prototype.toggleSound = function() {
      return localStorage.use_sounds = !(localStorage.use_sounds === 'true') + '';
    };

    return PomodorosController;

  })(Batman.Controller);

  Pomobat.Pomodoro = (function(_super) {

    __extends(Pomodoro, _super);

    Pomodoro.encode('title', 'state', 'timeLeft');

    Pomodoro.persist(Batman.LocalStorage);

    Pomodoro.storageKey = 'pomodoros-batman';

    function Pomodoro() {
      this.set('state', 'new');
      this.set('timeLeft', localStorage.work_time);
    }

    Pomodoro.accessor('running', function() {
      if (this.get('state') === 'running') {
        return true;
      } else {
        return false;
      }
    });

    Pomodoro.accessor('finished', function() {
      if (this.get('state') === 'finished') {
        return true;
      } else {
        return false;
      }
    });

    Pomodoro.accessor('is_new', function() {
      if (this.get('state') === 'new') {
        return true;
      } else {
        return false;
      }
    });

    Pomodoro.classAccessor('finished', function() {
      return this.get('all').filter(function(pomodoro) {
        return pomodoro.get('state') === 'finished';
      });
    });

    return Pomodoro;

  })(Batman.Model);

  window.Pomobat = Pomobat;

  Pomobat.run();

  console.log("running");

  window.onbeforeunload = function() {
    return 'Please do not leave this page.';
  };

}).call(this);
